// Золотые слитки. Два разбойника делят между собой n золотых слитков весами a1, a2, …, an​. 
// Поровну поделить не получается, поэтому разбойники хотят, чтобы суммы весов слитков, 
// которые им достанутся, были как можно более близкими. 
// Формально, обозначим через S1​ сумму весов слитков, которые достанутся первому разбойнику, 
// и через S2 - сумму весов слитков, которые достанутся второму разбойнику. 
// Нужно разделить слитки так, чтобы модуль разности ∣S1−S2∣ был наименьшим возможным. 
// При этом разбойники могут получить разные количества слитков. 
// Каждый слиток должен достаться либо первому, либо второму разбойнику.
//
// Входные данные
// В первой строке задано натуральное число n - количество слитков.
// В следующей строке заданы n натуральных чисел - веса слитков.
//
// Выходные данные
// Выведите одно целое число - наименьший модуль разности ∣S1−S2∣.
//
// Решение динамическим программированием

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <set>

using namespace std;

int main()
{
    setlocale(LC_ALL, "ru");

    int n;
    long long sum(0);
    string fn;
    ifstream cinf;

    cout << "Введите имя файла" << endl;
    cin >> fn;
    cinf.open(fn);
    cinf >> n;

    vector<int> a(n);
    for (int i = 0; i < n; i++)
    {
        cinf >> a[i];
        sum += a[i];
    }
    cinf.close();

    set<long long> s;
    for (int i = 0; i < n; i++)         // для каждого слитка вычисляем все суммы с его участием
    {
        set<long long> t;
        for (auto j : s)
        {
            if (j + a[i] > sum / 2 + sum % 2)   // рассматриваем только суммы не больше половины от общей
                continue;
            t.insert(j + a[i]);
        }
        t.insert(a[i]);
        s.insert(t.begin(), t.end());   // контейнер set хранит уникальные значения в отсортированном виде
    }

    auto it = s.end();  
    --it;                                   // берем максимальное значение
    cout << abs(sum - *it - *it) << endl;

    system("pause");
    return 0;
}

